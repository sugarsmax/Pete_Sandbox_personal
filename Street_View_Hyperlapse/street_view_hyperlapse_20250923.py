#!/usr/bin/env python3
"""
Street View Hyperlapse Automation Script

This script automates the capture of Street View images for creating hyperlapse videos
by using Playwright to control a browser and navigate through Google Street View.

Features:
- Navigate to any Street View location via URL
- Capture sequential frames by clicking center of Street View (natural forward movement)
- Automatically save screenshots with sequential naming
- Configurable number of frames and output directory

Usage:
    python street_view_hyperlapse_20250923.py --url "STREET_VIEW_URL" --frames 10 --output frames/

Author: Generated by AI Assistant
Date: September 23, 2025
"""

import argparse
import asyncio
import os
import time
from datetime import datetime
from pathlib import Path
from playwright.async_api import async_playwright


class StreetViewHyperlapse:
    def __init__(self, output_dir="frames", base_name="frame", delay=2.0, navigation_direction="forward"):
        """
        Initialize the Street View Hyperlapse capture system.
        
        Args:
            output_dir (str): Directory to save captured frames
            base_name (str): Base name for saved frame files
            delay (float): Delay between captures in seconds
            navigation_direction (str): Direction to navigate - "forward", "left", or "right"
        """
        self.output_dir = Path(output_dir)
        self.base_name = base_name
        self.delay = delay
        self.navigation_direction = navigation_direction
        self.browser = None
        self.page = None
        
        # Create output directory if it doesn't exist
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    async def setup_browser(self, headless=False):
        """Setup Playwright browser and page."""
        print("üöÄ Setting up browser...")
        playwright = await async_playwright().start()
        self.browser = await playwright.chromium.launch(headless=headless)
        self.page = await self.browser.new_page()
        
        # Set a larger viewport for better image quality
        await self.page.set_viewport_size({"width": 1920, "height": 1080})
        
    async def navigate_to_location(self, street_view_url):
        """
        Navigate to a Street View location.
        
        Args:
            street_view_url (str): Full Google Street View URL
        """
        print(f"üó∫Ô∏è Navigating to Street View location...")
        await self.page.goto(street_view_url)
        
        # Wait for Street View to load
        await self.page.wait_for_selector('[role="application"][aria-label*="Street View"]', 
                                         timeout=10000)
        await asyncio.sleep(3)  # Additional time for full load
        
    async def capture_frame(self, frame_number):
        """
        Capture a single frame from the current Street View position.
        
        Args:
            frame_number (int): Frame number for filename
            
        Returns:
            str: Path to saved frame file
        """
        timestamp = datetime.now().strftime("%H%M%S")
        filename = f"{self.base_name}_{frame_number:03d}_{timestamp}.png"
        filepath = self.output_dir / filename
        
        print(f"üì∏ Capturing frame {frame_number}: {filename}")
        
        # Take screenshot
        await self.page.screenshot(
            path=str(filepath),
            full_page=False,
            type='png'
        )
        
        return str(filepath)
        
    async def advance_street_view(self):
        """
        Navigate in Street View using configured direction (forward, left, right).
        Forward uses up-arrow key, left/right use side clicking for natural panning.
        """
        try:
            # Find the Street View application area
            street_view_app = await self.page.wait_for_selector(
                '[role="application"][aria-label*="Street View"]',
                timeout=5000
            )
            
            if street_view_app:
                direction = self.navigation_direction
                
                if direction == "forward":
                    # Forward movement: use up arrow key
                    print("‚¨ÜÔ∏è Moving forward in Street View (up-arrow)...")
                    await street_view_app.click()  # Ensure focus
                    await asyncio.sleep(0.5)
                    await self.page.keyboard.press('ArrowUp')
                    
                elif direction == "left":
                    # Left movement: click on left side of Street View
                    print("‚¨ÖÔ∏è Panning left in Street View (left-side click)...")
                    box = await street_view_app.bounding_box()
                    if box:
                        # Click on left third of the Street View area
                        left_x = box['x'] + (box['width'] * 0.25)
                        center_y = box['y'] + (box['height'] * 0.5)
                        await self.page.mouse.click(left_x, center_y)
                    else:
                        print("‚ö†Ô∏è Could not get Street View bounds, using center-left click")
                        await street_view_app.click()
                        
                elif direction == "right":
                    # Right movement: click on right side of Street View
                    print("‚û°Ô∏è Panning right in Street View (right-side click)...")
                    box = await street_view_app.bounding_box()
                    if box:
                        # Click on right third of the Street View area
                        right_x = box['x'] + (box['width'] * 0.75)
                        center_y = box['y'] + (box['height'] * 0.5)
                        await self.page.mouse.click(right_x, center_y)
                    else:
                        print("‚ö†Ô∏è Could not get Street View bounds, using center-right click")
                        await street_view_app.click()
                        
                else:
                    print(f"‚ö†Ô∏è Invalid direction '{direction}'. Using 'forward' as default.")
                    await street_view_app.click()  # Ensure focus
                    await asyncio.sleep(0.5)
                    await self.page.keyboard.press('ArrowUp')
                
                await asyncio.sleep(self.delay)  # Wait for new view to load
                return True
            else:
                print("‚ö†Ô∏è Could not find Street View application area")
                return False
                
        except Exception as e:
            print(f"‚ùå Error navigating Street View: {e}")
            return False
            
    async def capture_hyperlapse_sequence(self, street_view_url, num_frames=5):
        """
        Capture a sequence of frames for hyperlapse creation.
        
        Args:
            street_view_url (str): Starting Street View URL
            num_frames (int): Number of frames to capture
            
        Returns:
            list: Paths to all captured frame files
        """
        captured_frames = []
        
        try:
            # Setup and navigate to location
            await self.navigate_to_location(street_view_url)
            
            # Capture initial frame
            frame_path = await self.capture_frame(1)
            captured_frames.append(frame_path)
            
            # Capture subsequent frames by advancing through Street View
            for frame_num in range(2, num_frames + 1):
                # Try to advance to next position
                success = await self.advance_street_view()
                
                if not success:
                    print(f"‚ö†Ô∏è Could not advance further. Stopping at frame {frame_num - 1}")
                    break
                    
                # Capture frame at new position
                frame_path = await self.capture_frame(frame_num)
                captured_frames.append(frame_path)
                
                print(f"‚úÖ Captured frame {frame_num}/{num_frames}")
                
        except Exception as e:
            print(f"‚ùå Error during capture sequence: {e}")
            
        return captured_frames
        
    async def close_browser(self):
        """Clean up browser resources."""
        if self.browser:
            await self.browser.close()
            print("üîÑ Browser closed")
            
    def create_summary_report(self, captured_frames, street_view_url):
        """Create a summary report of the capture session."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = self.output_dir / f"hyperlapse_report_{timestamp}.md"
        
        report_content = f"""# Street View Hyperlapse Capture Report

**Generated:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Location:** {street_view_url}
**Total Frames:** {len(captured_frames)}
**Output Directory:** {self.output_dir}

## Captured Frames

"""
        
        for i, frame_path in enumerate(captured_frames, 1):
            frame_name = Path(frame_path).name
            report_content += f"{i}. `{frame_name}`\n"
            
        report_content += f"""
## Next Steps

To create a hyperlapse video from these frames, you can use tools like:

1. **FFmpeg** (command line):
   ```bash
   ffmpeg -r 2 -pattern_type glob -i "{self.output_dir}/*.png" -c:v libx264 -pix_fmt yuv420p hyperlapse.mp4
   ```

2. **Adobe Premiere Pro / After Effects**
3. **Final Cut Pro**
4. **DaVinci Resolve** (free)

## Tips for Better Results

- Use locations with clear forward paths (bridges, highways, long streets)
- Capture more frames (15-30) for smoother motion
- Consider different times of day for varied lighting
- Experiment with different frame rates in final video (1-5 fps typically works well)
"""
        
        with open(report_path, 'w') as f:
            f.write(report_content)
            
        print(f"üìÑ Summary report created: {report_path}")
        return str(report_path)


async def main():
    """Main function to run the Street View Hyperlapse capture."""
    parser = argparse.ArgumentParser(description="Capture Street View Hyperlapse Frames")
    parser.add_argument("--url", required=True, help="Google Street View URL")
    parser.add_argument("--frames", type=int, default=5, help="Number of frames to capture")
    parser.add_argument("--output", default="frames", help="Output directory for frames")
    parser.add_argument("--delay", type=float, default=2.0, help="Delay between captures (seconds)")
    parser.add_argument("--headless", action="store_true", help="Run browser in headless mode")
    parser.add_argument("--base-name", default="frame", help="Base name for frame files")
    parser.add_argument("--direction", choices=["forward", "left", "right"], default="forward", 
                       help="Navigation direction: forward (up arrow), left (left-side click), right (right-side click)")
    parser.add_argument("--no-timestamp", action="store_true", help="Skip creating timestamped subdirectory")
    
    args = parser.parse_args()
    
    # Create unique timestamped folder unless disabled
    if args.no_timestamp:
        output_dir = args.output
    else:
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_dir = f"{args.output}/capture_{timestamp}"
    
    print("üé¨ Street View Hyperlapse Capture Tool")
    print("=" * 50)
    print(f"üìç URL: {args.url}")
    print(f"üñºÔ∏è Frames: {args.frames}")
    print(f"üìÅ Output: {output_dir}")
    print(f"‚è±Ô∏è Delay: {args.delay}s")
    print(f"üß≠ Direction: {args.direction}")
    print("=" * 50)
    
    # Initialize hyperlapse capture system
    hyperlapse = StreetViewHyperlapse(
        output_dir=output_dir,
        base_name=args.base_name,
        delay=args.delay,
        navigation_direction=args.direction
    )
    
    try:
        # Setup browser
        await hyperlapse.setup_browser(headless=args.headless)
        
        # Capture sequence
        captured_frames = await hyperlapse.capture_hyperlapse_sequence(
            args.url, 
            args.frames
        )
        
        # Create summary report
        report_path = hyperlapse.create_summary_report(captured_frames, args.url)
        
        print("\nüéâ Capture Complete!")
        print(f"‚úÖ Captured {len(captured_frames)} frames")
        print(f"üìÅ Saved to: {hyperlapse.output_dir}")
        print(f"üìÑ Report: {report_path}")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Capture interrupted by user")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
    finally:
        # Clean up
        await hyperlapse.close_browser()


if __name__ == "__main__":
    # Example usage URLs:
    EXAMPLE_URLS = {
        "Bridge of the Gods": "https://www.google.com/maps/@45.6625315,-121.9022728,3a,75y,117.87h,90t/data=!3m7!1e1!3m5!1s2IfUeSpxk6FNDHC3fmcmNg!2e0!6shttps:%2F%2Fstreetviewpixels-pa.googleapis.com%2Fv1%2Fthumbnail%3Fcb_client%3Dmaps_sv.tactile%26w%3D900%26h%3D600%26pitch%3D0%26panoid%3D2IfUeSpxk6FNDHC3fmcmNg%26yaw%3D117.86904587328848!7i16384!8i8192",
        "Times Square NYC": "https://www.google.com/maps/place/Times+Square/@40.7579787,-73.9881229,17z/data=!3m8!1e1!3m6!1sCIHM0ogKEICAgIDEsaTtgQE!2e10!3e11!6shttps:%2F%2Flh3.googleusercontent.com%2Fgps-cs-s%2FAC9h4nrA4ppWoREs7YNQYRmaeAO58brhwd4Q65hUa4wWbkr9MqSRkv8DBDy4kPdB1zNiHwjyJ5WSQ5K6rLafUUhmf_XxAts2Vo5O2FjU3YsB9kVeTIu2AZiiLL4zKeGnQGQLnbu1fqtybA%3Dw900-h600-k-no-pi90-ya62-ro0-fo100!7i8704!8i4352",
    }
    
    asyncio.run(main())
